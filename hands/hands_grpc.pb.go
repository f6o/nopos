// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: hands/hands.proto

package hands

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Dealer_DealCard_FullMethodName       = "/Dealer/DealCard"
	Dealer_DealRandomCard_FullMethodName = "/Dealer/DealRandomCard"
)

// DealerClient is the client API for Dealer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DealerClient interface {
	DealCard(ctx context.Context, in *DealRequest, opts ...grpc.CallOption) (*Card, error)
	DealRandomCard(ctx context.Context, in *DealRandomCardRequest, opts ...grpc.CallOption) (*Card, error)
}

type dealerClient struct {
	cc grpc.ClientConnInterface
}

func NewDealerClient(cc grpc.ClientConnInterface) DealerClient {
	return &dealerClient{cc}
}

func (c *dealerClient) DealCard(ctx context.Context, in *DealRequest, opts ...grpc.CallOption) (*Card, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Card)
	err := c.cc.Invoke(ctx, Dealer_DealCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerClient) DealRandomCard(ctx context.Context, in *DealRandomCardRequest, opts ...grpc.CallOption) (*Card, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Card)
	err := c.cc.Invoke(ctx, Dealer_DealRandomCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DealerServer is the server API for Dealer service.
// All implementations must embed UnimplementedDealerServer
// for forward compatibility.
type DealerServer interface {
	DealCard(context.Context, *DealRequest) (*Card, error)
	DealRandomCard(context.Context, *DealRandomCardRequest) (*Card, error)
	mustEmbedUnimplementedDealerServer()
}

// UnimplementedDealerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDealerServer struct{}

func (UnimplementedDealerServer) DealCard(context.Context, *DealRequest) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DealCard not implemented")
}
func (UnimplementedDealerServer) DealRandomCard(context.Context, *DealRandomCardRequest) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DealRandomCard not implemented")
}
func (UnimplementedDealerServer) mustEmbedUnimplementedDealerServer() {}
func (UnimplementedDealerServer) testEmbeddedByValue()                {}

// UnsafeDealerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DealerServer will
// result in compilation errors.
type UnsafeDealerServer interface {
	mustEmbedUnimplementedDealerServer()
}

func RegisterDealerServer(s grpc.ServiceRegistrar, srv DealerServer) {
	// If the following call pancis, it indicates UnimplementedDealerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Dealer_ServiceDesc, srv)
}

func _Dealer_DealCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServer).DealCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dealer_DealCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServer).DealCard(ctx, req.(*DealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dealer_DealRandomCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealRandomCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServer).DealRandomCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dealer_DealRandomCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServer).DealRandomCard(ctx, req.(*DealRandomCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dealer_ServiceDesc is the grpc.ServiceDesc for Dealer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dealer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Dealer",
	HandlerType: (*DealerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DealCard",
			Handler:    _Dealer_DealCard_Handler,
		},
		{
			MethodName: "DealRandomCard",
			Handler:    _Dealer_DealRandomCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hands/hands.proto",
}

const (
	GameManager_AddUser_FullMethodName   = "/GameManager/AddUser"
	GameManager_ListUsers_FullMethodName = "/GameManager/ListUsers"
)

// GameManagerClient is the client API for GameManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameManagerClient interface {
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*User, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
}

type gameManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGameManagerClient(cc grpc.ClientConnInterface) GameManagerClient {
	return &gameManagerClient{cc}
}

func (c *gameManagerClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, GameManager_AddUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameManagerClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, GameManager_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameManagerServer is the server API for GameManager service.
// All implementations must embed UnimplementedGameManagerServer
// for forward compatibility.
type GameManagerServer interface {
	AddUser(context.Context, *AddUserRequest) (*User, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	mustEmbedUnimplementedGameManagerServer()
}

// UnimplementedGameManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameManagerServer struct{}

func (UnimplementedGameManagerServer) AddUser(context.Context, *AddUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedGameManagerServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedGameManagerServer) mustEmbedUnimplementedGameManagerServer() {}
func (UnimplementedGameManagerServer) testEmbeddedByValue()                     {}

// UnsafeGameManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameManagerServer will
// result in compilation errors.
type UnsafeGameManagerServer interface {
	mustEmbedUnimplementedGameManagerServer()
}

func RegisterGameManagerServer(s grpc.ServiceRegistrar, srv GameManagerServer) {
	// If the following call pancis, it indicates UnimplementedGameManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameManager_ServiceDesc, srv)
}

func _GameManager_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameManager_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameManager_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameManager_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameManager_ServiceDesc is the grpc.ServiceDesc for GameManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GameManager",
	HandlerType: (*GameManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _GameManager_AddUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _GameManager_ListUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hands/hands.proto",
}
